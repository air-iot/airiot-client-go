// protoc -I ./ --go_out=. ./driver/driver.proto
// protoc -I ./ --go-grpc_out=. driver/driver.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: driver/driver.proto

package driver

import (
	context "context"
	api "github.com/air-iot/api-client-go/v4/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DriverService_HealthCheck_FullMethodName        = "/driver.DriverService/HealthCheck"
	DriverService_Event_FullMethodName              = "/driver.DriverService/Event"
	DriverService_CommandLog_FullMethodName         = "/driver.DriverService/CommandLog"
	DriverService_UpdateTableData_FullMethodName    = "/driver.DriverService/UpdateTableData"
	DriverService_FindTableData_FullMethodName      = "/driver.DriverService/FindTableData"
	DriverService_SchemaStream_FullMethodName       = "/driver.DriverService/SchemaStream"
	DriverService_StartStream_FullMethodName        = "/driver.DriverService/StartStream"
	DriverService_RunStream_FullMethodName          = "/driver.DriverService/RunStream"
	DriverService_WriteTagStream_FullMethodName     = "/driver.DriverService/WriteTagStream"
	DriverService_BatchRunStream_FullMethodName     = "/driver.DriverService/BatchRunStream"
	DriverService_DebugStream_FullMethodName        = "/driver.DriverService/DebugStream"
	DriverService_HttpProxyStream_FullMethodName    = "/driver.DriverService/HttpProxyStream"
	DriverService_ConfigUpdateStream_FullMethodName = "/driver.DriverService/ConfigUpdateStream"
	DriverService_BatchCommand_FullMethodName       = "/driver.DriverService/BatchCommand"
	DriverService_ChangeCommand_FullMethodName      = "/driver.DriverService/ChangeCommand"
	DriverService_HttpProxy_FullMethodName          = "/driver.DriverService/HttpProxy"
	DriverService_WriteTag_FullMethodName           = "/driver.DriverService/WriteTag"
	DriverService_BatchWriteTag_FullMethodName      = "/driver.DriverService/BatchWriteTag"
)

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverServiceClient interface {
	// 驱动用
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Event(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CommandLog(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateTableData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	FindTableData(ctx context.Context, in *TableDataRequest, opts ...grpc.CallOption) (*Response, error)
	SchemaStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_SchemaStreamClient, error)
	StartStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_StartStreamClient, error)
	RunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_RunStreamClient, error)
	WriteTagStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_WriteTagStreamClient, error)
	BatchRunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_BatchRunStreamClient, error)
	DebugStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_DebugStreamClient, error)
	HttpProxyStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_HttpProxyStreamClient, error)
	ConfigUpdateStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_ConfigUpdateStreamClient, error)
	// 平台用
	BatchCommand(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
	ChangeCommand(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	HttpProxy(ctx context.Context, in *ClientHttpProxyRequest, opts ...grpc.CallOption) (*api.Response, error)
	WriteTag(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
	BatchWriteTag(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DriverService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) Event(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DriverService_Event_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) CommandLog(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DriverService_CommandLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) UpdateTableData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DriverService_UpdateTableData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) FindTableData(ctx context.Context, in *TableDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DriverService_FindTableData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) SchemaStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_SchemaStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[0], DriverService_SchemaStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceSchemaStreamClient{stream}
	return x, nil
}

type DriverService_SchemaStreamClient interface {
	Send(*SchemaResult) error
	Recv() (*SchemaRequest, error)
	grpc.ClientStream
}

type driverServiceSchemaStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceSchemaStreamClient) Send(m *SchemaResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceSchemaStreamClient) Recv() (*SchemaRequest, error) {
	m := new(SchemaRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) StartStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[1], DriverService_StartStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceStartStreamClient{stream}
	return x, nil
}

type DriverService_StartStreamClient interface {
	Send(*StartResult) error
	Recv() (*StartRequest, error)
	grpc.ClientStream
}

type driverServiceStartStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceStartStreamClient) Send(m *StartResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceStartStreamClient) Recv() (*StartRequest, error) {
	m := new(StartRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) RunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_RunStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[2], DriverService_RunStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceRunStreamClient{stream}
	return x, nil
}

type DriverService_RunStreamClient interface {
	Send(*RunResult) error
	Recv() (*RunRequest, error)
	grpc.ClientStream
}

type driverServiceRunStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceRunStreamClient) Send(m *RunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceRunStreamClient) Recv() (*RunRequest, error) {
	m := new(RunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) WriteTagStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_WriteTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[3], DriverService_WriteTagStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceWriteTagStreamClient{stream}
	return x, nil
}

type DriverService_WriteTagStreamClient interface {
	Send(*RunResult) error
	Recv() (*RunRequest, error)
	grpc.ClientStream
}

type driverServiceWriteTagStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceWriteTagStreamClient) Send(m *RunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceWriteTagStreamClient) Recv() (*RunRequest, error) {
	m := new(RunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) BatchRunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_BatchRunStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[4], DriverService_BatchRunStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceBatchRunStreamClient{stream}
	return x, nil
}

type DriverService_BatchRunStreamClient interface {
	Send(*BatchRunResult) error
	Recv() (*BatchRunRequest, error)
	grpc.ClientStream
}

type driverServiceBatchRunStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceBatchRunStreamClient) Send(m *BatchRunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceBatchRunStreamClient) Recv() (*BatchRunRequest, error) {
	m := new(BatchRunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) DebugStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_DebugStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[5], DriverService_DebugStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceDebugStreamClient{stream}
	return x, nil
}

type DriverService_DebugStreamClient interface {
	Send(*Debug) error
	Recv() (*Debug, error)
	grpc.ClientStream
}

type driverServiceDebugStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceDebugStreamClient) Send(m *Debug) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceDebugStreamClient) Recv() (*Debug, error) {
	m := new(Debug)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) HttpProxyStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_HttpProxyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[6], DriverService_HttpProxyStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceHttpProxyStreamClient{stream}
	return x, nil
}

type DriverService_HttpProxyStreamClient interface {
	Send(*HttpProxyResult) error
	Recv() (*HttpProxyRequest, error)
	grpc.ClientStream
}

type driverServiceHttpProxyStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceHttpProxyStreamClient) Send(m *HttpProxyResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceHttpProxyStreamClient) Recv() (*HttpProxyRequest, error) {
	m := new(HttpProxyRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) ConfigUpdateStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_ConfigUpdateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[7], DriverService_ConfigUpdateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceConfigUpdateStreamClient{stream}
	return x, nil
}

type DriverService_ConfigUpdateStreamClient interface {
	Send(*ConfigUpdateResponse) error
	Recv() (*ConfigUpdateRequest, error)
	grpc.ClientStream
}

type driverServiceConfigUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceConfigUpdateStreamClient) Send(m *ConfigUpdateResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceConfigUpdateStreamClient) Recv() (*ConfigUpdateRequest, error) {
	m := new(ConfigUpdateRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) BatchCommand(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverService_BatchCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) ChangeCommand(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverService_ChangeCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) HttpProxy(ctx context.Context, in *ClientHttpProxyRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverService_HttpProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) WriteTag(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverService_WriteTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) BatchWriteTag(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverService_BatchWriteTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServiceServer is the server API for DriverService service.
// All implementations must embed UnimplementedDriverServiceServer
// for forward compatibility
type DriverServiceServer interface {
	// 驱动用
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Event(context.Context, *Request) (*Response, error)
	CommandLog(context.Context, *Request) (*Response, error)
	UpdateTableData(context.Context, *Request) (*Response, error)
	FindTableData(context.Context, *TableDataRequest) (*Response, error)
	SchemaStream(DriverService_SchemaStreamServer) error
	StartStream(DriverService_StartStreamServer) error
	RunStream(DriverService_RunStreamServer) error
	WriteTagStream(DriverService_WriteTagStreamServer) error
	BatchRunStream(DriverService_BatchRunStreamServer) error
	DebugStream(DriverService_DebugStreamServer) error
	HttpProxyStream(DriverService_HttpProxyStreamServer) error
	ConfigUpdateStream(DriverService_ConfigUpdateStreamServer) error
	// 平台用
	BatchCommand(context.Context, *api.CreateRequest) (*api.Response, error)
	ChangeCommand(context.Context, *api.UpdateRequest) (*api.Response, error)
	HttpProxy(context.Context, *ClientHttpProxyRequest) (*api.Response, error)
	WriteTag(context.Context, *api.CreateRequest) (*api.Response, error)
	BatchWriteTag(context.Context, *api.CreateRequest) (*api.Response, error)
	mustEmbedUnimplementedDriverServiceServer()
}

// UnimplementedDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServiceServer struct {
}

func (UnimplementedDriverServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDriverServiceServer) Event(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedDriverServiceServer) CommandLog(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandLog not implemented")
}
func (UnimplementedDriverServiceServer) UpdateTableData(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTableData not implemented")
}
func (UnimplementedDriverServiceServer) FindTableData(context.Context, *TableDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTableData not implemented")
}
func (UnimplementedDriverServiceServer) SchemaStream(DriverService_SchemaStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SchemaStream not implemented")
}
func (UnimplementedDriverServiceServer) StartStream(DriverService_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedDriverServiceServer) RunStream(DriverService_RunStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RunStream not implemented")
}
func (UnimplementedDriverServiceServer) WriteTagStream(DriverService_WriteTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteTagStream not implemented")
}
func (UnimplementedDriverServiceServer) BatchRunStream(DriverService_BatchRunStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchRunStream not implemented")
}
func (UnimplementedDriverServiceServer) DebugStream(DriverService_DebugStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DebugStream not implemented")
}
func (UnimplementedDriverServiceServer) HttpProxyStream(DriverService_HttpProxyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HttpProxyStream not implemented")
}
func (UnimplementedDriverServiceServer) ConfigUpdateStream(DriverService_ConfigUpdateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigUpdateStream not implemented")
}
func (UnimplementedDriverServiceServer) BatchCommand(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCommand not implemented")
}
func (UnimplementedDriverServiceServer) ChangeCommand(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCommand not implemented")
}
func (UnimplementedDriverServiceServer) HttpProxy(context.Context, *ClientHttpProxyRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpProxy not implemented")
}
func (UnimplementedDriverServiceServer) WriteTag(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteTag not implemented")
}
func (UnimplementedDriverServiceServer) BatchWriteTag(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWriteTag not implemented")
}
func (UnimplementedDriverServiceServer) mustEmbedUnimplementedDriverServiceServer() {}

// UnsafeDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServiceServer will
// result in compilation errors.
type UnsafeDriverServiceServer interface {
	mustEmbedUnimplementedDriverServiceServer()
}

func RegisterDriverServiceServer(s grpc.ServiceRegistrar, srv DriverServiceServer) {
	s.RegisterService(&DriverService_ServiceDesc, srv)
}

func _DriverService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).Event(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_CommandLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).CommandLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_CommandLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).CommandLog(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_UpdateTableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).UpdateTableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_UpdateTableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).UpdateTableData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_FindTableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).FindTableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_FindTableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).FindTableData(ctx, req.(*TableDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_SchemaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).SchemaStream(&driverServiceSchemaStreamServer{stream})
}

type DriverService_SchemaStreamServer interface {
	Send(*SchemaRequest) error
	Recv() (*SchemaResult, error)
	grpc.ServerStream
}

type driverServiceSchemaStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceSchemaStreamServer) Send(m *SchemaRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceSchemaStreamServer) Recv() (*SchemaResult, error) {
	m := new(SchemaResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).StartStream(&driverServiceStartStreamServer{stream})
}

type DriverService_StartStreamServer interface {
	Send(*StartRequest) error
	Recv() (*StartResult, error)
	grpc.ServerStream
}

type driverServiceStartStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceStartStreamServer) Send(m *StartRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceStartStreamServer) Recv() (*StartResult, error) {
	m := new(StartResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_RunStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).RunStream(&driverServiceRunStreamServer{stream})
}

type DriverService_RunStreamServer interface {
	Send(*RunRequest) error
	Recv() (*RunResult, error)
	grpc.ServerStream
}

type driverServiceRunStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceRunStreamServer) Send(m *RunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceRunStreamServer) Recv() (*RunResult, error) {
	m := new(RunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_WriteTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).WriteTagStream(&driverServiceWriteTagStreamServer{stream})
}

type DriverService_WriteTagStreamServer interface {
	Send(*RunRequest) error
	Recv() (*RunResult, error)
	grpc.ServerStream
}

type driverServiceWriteTagStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceWriteTagStreamServer) Send(m *RunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceWriteTagStreamServer) Recv() (*RunResult, error) {
	m := new(RunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_BatchRunStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).BatchRunStream(&driverServiceBatchRunStreamServer{stream})
}

type DriverService_BatchRunStreamServer interface {
	Send(*BatchRunRequest) error
	Recv() (*BatchRunResult, error)
	grpc.ServerStream
}

type driverServiceBatchRunStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceBatchRunStreamServer) Send(m *BatchRunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceBatchRunStreamServer) Recv() (*BatchRunResult, error) {
	m := new(BatchRunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_DebugStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).DebugStream(&driverServiceDebugStreamServer{stream})
}

type DriverService_DebugStreamServer interface {
	Send(*Debug) error
	Recv() (*Debug, error)
	grpc.ServerStream
}

type driverServiceDebugStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceDebugStreamServer) Send(m *Debug) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceDebugStreamServer) Recv() (*Debug, error) {
	m := new(Debug)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_HttpProxyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).HttpProxyStream(&driverServiceHttpProxyStreamServer{stream})
}

type DriverService_HttpProxyStreamServer interface {
	Send(*HttpProxyRequest) error
	Recv() (*HttpProxyResult, error)
	grpc.ServerStream
}

type driverServiceHttpProxyStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceHttpProxyStreamServer) Send(m *HttpProxyRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceHttpProxyStreamServer) Recv() (*HttpProxyResult, error) {
	m := new(HttpProxyResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_ConfigUpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).ConfigUpdateStream(&driverServiceConfigUpdateStreamServer{stream})
}

type DriverService_ConfigUpdateStreamServer interface {
	Send(*ConfigUpdateRequest) error
	Recv() (*ConfigUpdateResponse, error)
	grpc.ServerStream
}

type driverServiceConfigUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceConfigUpdateStreamServer) Send(m *ConfigUpdateRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceConfigUpdateStreamServer) Recv() (*ConfigUpdateResponse, error) {
	m := new(ConfigUpdateResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_BatchCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).BatchCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_BatchCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).BatchCommand(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_ChangeCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).ChangeCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_ChangeCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).ChangeCommand(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_HttpProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientHttpProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).HttpProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_HttpProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).HttpProxy(ctx, req.(*ClientHttpProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_WriteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).WriteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_WriteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).WriteTag(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_BatchWriteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).BatchWriteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_BatchWriteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).BatchWriteTag(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverService_ServiceDesc is the grpc.ServiceDesc for DriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DriverService_HealthCheck_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _DriverService_Event_Handler,
		},
		{
			MethodName: "CommandLog",
			Handler:    _DriverService_CommandLog_Handler,
		},
		{
			MethodName: "UpdateTableData",
			Handler:    _DriverService_UpdateTableData_Handler,
		},
		{
			MethodName: "FindTableData",
			Handler:    _DriverService_FindTableData_Handler,
		},
		{
			MethodName: "BatchCommand",
			Handler:    _DriverService_BatchCommand_Handler,
		},
		{
			MethodName: "ChangeCommand",
			Handler:    _DriverService_ChangeCommand_Handler,
		},
		{
			MethodName: "HttpProxy",
			Handler:    _DriverService_HttpProxy_Handler,
		},
		{
			MethodName: "WriteTag",
			Handler:    _DriverService_WriteTag_Handler,
		},
		{
			MethodName: "BatchWriteTag",
			Handler:    _DriverService_BatchWriteTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SchemaStream",
			Handler:       _DriverService_SchemaStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartStream",
			Handler:       _DriverService_StartStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunStream",
			Handler:       _DriverService_RunStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteTagStream",
			Handler:       _DriverService_WriteTagStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchRunStream",
			Handler:       _DriverService_BatchRunStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DebugStream",
			Handler:       _DriverService_DebugStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HttpProxyStream",
			Handler:       _DriverService_HttpProxyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConfigUpdateStream",
			Handler:       _DriverService_ConfigUpdateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "driver/driver.proto",
}

const (
	DriverInstanceService_Query_FullMethodName   = "/driver.DriverInstanceService/Query"
	DriverInstanceService_Get_FullMethodName     = "/driver.DriverInstanceService/Get"
	DriverInstanceService_Delete_FullMethodName  = "/driver.DriverInstanceService/Delete"
	DriverInstanceService_Update_FullMethodName  = "/driver.DriverInstanceService/Update"
	DriverInstanceService_Replace_FullMethodName = "/driver.DriverInstanceService/Replace"
	DriverInstanceService_Create_FullMethodName  = "/driver.DriverInstanceService/Create"
)

// DriverInstanceServiceClient is the client API for DriverInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverInstanceServiceClient interface {
	Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error)
	Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type driverInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverInstanceServiceClient(cc grpc.ClientConnInterface) DriverInstanceServiceClient {
	return &driverInstanceServiceClient{cc}
}

func (c *driverInstanceServiceClient) Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstanceService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstanceServiceClient) Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstanceService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstanceServiceClient) Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstanceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstanceServiceClient) Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstanceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstanceServiceClient) Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstanceService_Replace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstanceServiceClient) Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstanceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverInstanceServiceServer is the server API for DriverInstanceService service.
// All implementations must embed UnimplementedDriverInstanceServiceServer
// for forward compatibility
type DriverInstanceServiceServer interface {
	Query(context.Context, *api.QueryRequest) (*api.Response, error)
	Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Update(context.Context, *api.UpdateRequest) (*api.Response, error)
	Replace(context.Context, *api.UpdateRequest) (*api.Response, error)
	Create(context.Context, *api.CreateRequest) (*api.Response, error)
	mustEmbedUnimplementedDriverInstanceServiceServer()
}

// UnimplementedDriverInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverInstanceServiceServer struct {
}

func (UnimplementedDriverInstanceServiceServer) Query(context.Context, *api.QueryRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDriverInstanceServiceServer) Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDriverInstanceServiceServer) Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDriverInstanceServiceServer) Update(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriverInstanceServiceServer) Replace(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedDriverInstanceServiceServer) Create(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDriverInstanceServiceServer) mustEmbedUnimplementedDriverInstanceServiceServer() {}

// UnsafeDriverInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverInstanceServiceServer will
// result in compilation errors.
type UnsafeDriverInstanceServiceServer interface {
	mustEmbedUnimplementedDriverInstanceServiceServer()
}

func RegisterDriverInstanceServiceServer(s grpc.ServiceRegistrar, srv DriverInstanceServiceServer) {
	s.RegisterService(&DriverInstanceService_ServiceDesc, srv)
}

func _DriverInstanceService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstanceServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstanceService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstanceServiceServer).Query(ctx, req.(*api.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstanceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstanceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstanceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstanceServiceServer).Get(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstanceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstanceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstanceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstanceServiceServer).Delete(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstanceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstanceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstanceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstanceServiceServer).Update(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstanceService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstanceServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstanceService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstanceServiceServer).Replace(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstanceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstanceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstanceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstanceServiceServer).Create(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverInstanceService_ServiceDesc is the grpc.ServiceDesc for DriverInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverInstanceService",
	HandlerType: (*DriverInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DriverInstanceService_Query_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DriverInstanceService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DriverInstanceService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DriverInstanceService_Update_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _DriverInstanceService_Replace_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DriverInstanceService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver/driver.proto",
}

const (
	DriverEventCronService_Query_FullMethodName      = "/driver.DriverEventCronService/Query"
	DriverEventCronService_Get_FullMethodName        = "/driver.DriverEventCronService/Get"
	DriverEventCronService_Delete_FullMethodName     = "/driver.DriverEventCronService/Delete"
	DriverEventCronService_Update_FullMethodName     = "/driver.DriverEventCronService/Update"
	DriverEventCronService_Replace_FullMethodName    = "/driver.DriverEventCronService/Replace"
	DriverEventCronService_Create_FullMethodName     = "/driver.DriverEventCronService/Create"
	DriverEventCronService_CreateMany_FullMethodName = "/driver.DriverEventCronService/CreateMany"
	DriverEventCronService_DeleteMany_FullMethodName = "/driver.DriverEventCronService/DeleteMany"
)

// DriverEventCronServiceClient is the client API for DriverEventCronService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverEventCronServiceClient interface {
	Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error)
	Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
	CreateMany(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
	DeleteMany(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type driverEventCronServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverEventCronServiceClient(cc grpc.ClientConnInterface) DriverEventCronServiceClient {
	return &driverEventCronServiceClient{cc}
}

func (c *driverEventCronServiceClient) Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_Replace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) CreateMany(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_CreateMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverEventCronServiceClient) DeleteMany(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverEventCronService_DeleteMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverEventCronServiceServer is the server API for DriverEventCronService service.
// All implementations must embed UnimplementedDriverEventCronServiceServer
// for forward compatibility
type DriverEventCronServiceServer interface {
	Query(context.Context, *api.QueryRequest) (*api.Response, error)
	Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Update(context.Context, *api.UpdateRequest) (*api.Response, error)
	Replace(context.Context, *api.UpdateRequest) (*api.Response, error)
	Create(context.Context, *api.CreateRequest) (*api.Response, error)
	CreateMany(context.Context, *api.CreateRequest) (*api.Response, error)
	DeleteMany(context.Context, *api.QueryRequest) (*api.Response, error)
	mustEmbedUnimplementedDriverEventCronServiceServer()
}

// UnimplementedDriverEventCronServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverEventCronServiceServer struct {
}

func (UnimplementedDriverEventCronServiceServer) Query(context.Context, *api.QueryRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDriverEventCronServiceServer) Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDriverEventCronServiceServer) Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDriverEventCronServiceServer) Update(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriverEventCronServiceServer) Replace(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedDriverEventCronServiceServer) Create(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDriverEventCronServiceServer) CreateMany(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedDriverEventCronServiceServer) DeleteMany(context.Context, *api.QueryRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedDriverEventCronServiceServer) mustEmbedUnimplementedDriverEventCronServiceServer() {
}

// UnsafeDriverEventCronServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverEventCronServiceServer will
// result in compilation errors.
type UnsafeDriverEventCronServiceServer interface {
	mustEmbedUnimplementedDriverEventCronServiceServer()
}

func RegisterDriverEventCronServiceServer(s grpc.ServiceRegistrar, srv DriverEventCronServiceServer) {
	s.RegisterService(&DriverEventCronService_ServiceDesc, srv)
}

func _DriverEventCronService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).Query(ctx, req.(*api.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).Get(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).Delete(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).Update(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).Replace(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).Create(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_CreateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).CreateMany(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverEventCronService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverEventCronServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverEventCronService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverEventCronServiceServer).DeleteMany(ctx, req.(*api.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverEventCronService_ServiceDesc is the grpc.ServiceDesc for DriverEventCronService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverEventCronService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverEventCronService",
	HandlerType: (*DriverEventCronServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DriverEventCronService_Query_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DriverEventCronService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DriverEventCronService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DriverEventCronService_Update_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _DriverEventCronService_Replace_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DriverEventCronService_Create_Handler,
		},
		{
			MethodName: "CreateMany",
			Handler:    _DriverEventCronService_CreateMany_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _DriverEventCronService_DeleteMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver/driver.proto",
}

const (
	DriverInstructCronService_Query_FullMethodName      = "/driver.DriverInstructCronService/Query"
	DriverInstructCronService_Get_FullMethodName        = "/driver.DriverInstructCronService/Get"
	DriverInstructCronService_Delete_FullMethodName     = "/driver.DriverInstructCronService/Delete"
	DriverInstructCronService_Update_FullMethodName     = "/driver.DriverInstructCronService/Update"
	DriverInstructCronService_Replace_FullMethodName    = "/driver.DriverInstructCronService/Replace"
	DriverInstructCronService_Create_FullMethodName     = "/driver.DriverInstructCronService/Create"
	DriverInstructCronService_CreateMany_FullMethodName = "/driver.DriverInstructCronService/CreateMany"
	DriverInstructCronService_DeleteMany_FullMethodName = "/driver.DriverInstructCronService/DeleteMany"
)

// DriverInstructCronServiceClient is the client API for DriverInstructCronService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverInstructCronServiceClient interface {
	Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error)
	Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
	CreateMany(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
	DeleteMany(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type driverInstructCronServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverInstructCronServiceClient(cc grpc.ClientConnInterface) DriverInstructCronServiceClient {
	return &driverInstructCronServiceClient{cc}
}

func (c *driverInstructCronServiceClient) Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_Replace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) CreateMany(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_CreateMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructCronServiceClient) DeleteMany(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructCronService_DeleteMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverInstructCronServiceServer is the server API for DriverInstructCronService service.
// All implementations must embed UnimplementedDriverInstructCronServiceServer
// for forward compatibility
type DriverInstructCronServiceServer interface {
	Query(context.Context, *api.QueryRequest) (*api.Response, error)
	Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Update(context.Context, *api.UpdateRequest) (*api.Response, error)
	Replace(context.Context, *api.UpdateRequest) (*api.Response, error)
	Create(context.Context, *api.CreateRequest) (*api.Response, error)
	CreateMany(context.Context, *api.CreateRequest) (*api.Response, error)
	DeleteMany(context.Context, *api.QueryRequest) (*api.Response, error)
	mustEmbedUnimplementedDriverInstructCronServiceServer()
}

// UnimplementedDriverInstructCronServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverInstructCronServiceServer struct {
}

func (UnimplementedDriverInstructCronServiceServer) Query(context.Context, *api.QueryRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) Update(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) Replace(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) Create(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) CreateMany(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) DeleteMany(context.Context, *api.QueryRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedDriverInstructCronServiceServer) mustEmbedUnimplementedDriverInstructCronServiceServer() {
}

// UnsafeDriverInstructCronServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverInstructCronServiceServer will
// result in compilation errors.
type UnsafeDriverInstructCronServiceServer interface {
	mustEmbedUnimplementedDriverInstructCronServiceServer()
}

func RegisterDriverInstructCronServiceServer(s grpc.ServiceRegistrar, srv DriverInstructCronServiceServer) {
	s.RegisterService(&DriverInstructCronService_ServiceDesc, srv)
}

func _DriverInstructCronService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).Query(ctx, req.(*api.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).Get(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).Delete(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).Update(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).Replace(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).Create(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_CreateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).CreateMany(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructCronService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructCronServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructCronService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructCronServiceServer).DeleteMany(ctx, req.(*api.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverInstructCronService_ServiceDesc is the grpc.ServiceDesc for DriverInstructCronService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverInstructCronService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverInstructCronService",
	HandlerType: (*DriverInstructCronServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DriverInstructCronService_Query_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DriverInstructCronService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DriverInstructCronService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DriverInstructCronService_Update_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _DriverInstructCronService_Replace_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DriverInstructCronService_Create_Handler,
		},
		{
			MethodName: "CreateMany",
			Handler:    _DriverInstructCronService_CreateMany_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _DriverInstructCronService_DeleteMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver/driver.proto",
}

const (
	DriverInstructService_GetCommands_FullMethodName = "/driver.DriverInstructService/GetCommands"
	DriverInstructService_Update_FullMethodName      = "/driver.DriverInstructService/Update"
)

// DriverInstructServiceClient is the client API for DriverInstructService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverInstructServiceClient interface {
	GetCommands(ctx context.Context, in *RequestCommand, opts ...grpc.CallOption) (*api.Response, error)
	Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type driverInstructServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverInstructServiceClient(cc grpc.ClientConnInterface) DriverInstructServiceClient {
	return &driverInstructServiceClient{cc}
}

func (c *driverInstructServiceClient) GetCommands(ctx context.Context, in *RequestCommand, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructService_GetCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverInstructServiceClient) Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DriverInstructService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverInstructServiceServer is the server API for DriverInstructService service.
// All implementations must embed UnimplementedDriverInstructServiceServer
// for forward compatibility
type DriverInstructServiceServer interface {
	GetCommands(context.Context, *RequestCommand) (*api.Response, error)
	Update(context.Context, *api.UpdateRequest) (*api.Response, error)
	mustEmbedUnimplementedDriverInstructServiceServer()
}

// UnimplementedDriverInstructServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverInstructServiceServer struct {
}

func (UnimplementedDriverInstructServiceServer) GetCommands(context.Context, *RequestCommand) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedDriverInstructServiceServer) Update(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriverInstructServiceServer) mustEmbedUnimplementedDriverInstructServiceServer() {}

// UnsafeDriverInstructServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverInstructServiceServer will
// result in compilation errors.
type UnsafeDriverInstructServiceServer interface {
	mustEmbedUnimplementedDriverInstructServiceServer()
}

func RegisterDriverInstructServiceServer(s grpc.ServiceRegistrar, srv DriverInstructServiceServer) {
	s.RegisterService(&DriverInstructService_ServiceDesc, srv)
}

func _DriverInstructService_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructServiceServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructService_GetCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructServiceServer).GetCommands(ctx, req.(*RequestCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverInstructService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverInstructServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverInstructService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverInstructServiceServer).Update(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverInstructService_ServiceDesc is the grpc.ServiceDesc for DriverInstructService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverInstructService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverInstructService",
	HandlerType: (*DriverInstructServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommands",
			Handler:    _DriverInstructService_GetCommands_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DriverInstructService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver/driver.proto",
}
